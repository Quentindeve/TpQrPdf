package tpqrpdf;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.awt.*;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Arrays;

import javax.imageio.ImageIO;

import com.itextpdf.text.Font;
import me.quentin.tp_qrpdf.models.AlignedImage;
import org.junit.jupiter.api.Test;

import me.quentin.tp_qrpdf.models.DocumentGenerator;
import me.quentin.tp_qrpdf.models.DocumentGeneratorConfig;

public class DocumentGeneratorTests {
	
	DocumentGeneratorConfig config = new DocumentGeneratorConfig(new Font(Font.FontFamily.HELVETICA), Color.WHITE, Color.WHITE, Color.WHITE, AlignedImage.Alignment.LEFT, new ArrayList<>());
    /**
     * Verifies that the QR code generated by DocumentGenerator.getQrCodeBytes() is a valid PNG file.
     * @throws Exception
     */
//    @Test
//    public void testDocumentGeneratorOutputsQrCodeInPngFormat() throws Exception {
//        var documentGenerator = new DocumentGenerator();
//        var qrCode = documentGenerator.getQrCodeBytes("Test", config);
//        var expectedPngSignature = new byte[]{(byte) 0x89, (byte) 0x50, (byte) 0x4e, (byte) 0x47};
//
//        var qrCodeSignature = Arrays.copyOfRange(qrCode, 0, expectedPngSignature.length);
//        assertTrue(Arrays.equals(expectedPngSignature, qrCodeSignature));
//    }

    /**
     * Verifies that the QR code generated by DocumentGenerator.getQrCodeBytes() is a square of the desired size.
     */
//    @Test
//    public void testDocumentGeneratorQrCodeIsGoodSize() throws Exception {
//        var documentGenerator = new DocumentGenerator();
//        var qrCode = documentGenerator.getQrCodeBytes("Test", config);
//        var expectedSize = DocumentGenerator.IMAGE_SIZE * DocumentGenerator.IMAGE_SIZE;
//        var image = ImageIO.read(new ByteArrayInputStream(qrCode));
//
//        assertEquals(image.getWidth() * image.getHeight(), expectedSize);
//    }

    /**
     * Verifies that the output PDF file from DocumentGenerator.generateDocument() is a valid PDF file.
     * @throws Exception
     */
    @Test
    public void testDocumentGeneratorOutputsPdf() throws Exception {
        var documentGenerator = new DocumentGenerator();
        var pdf = documentGenerator.generateDocument("Test", config);
        var expectedPdfSignature = new byte[]{(byte) 0x25, (byte) 0x50, (byte) 0x44, (byte) 0x46};
        var pdfSignature = new byte[expectedPdfSignature.length];
        var pdfInputStream = new FileInputStream(pdf);

        pdfInputStream.read(pdfSignature);
        pdfInputStream.close();

        assertTrue(Arrays.equals(expectedPdfSignature, pdfSignature));
    }
}
