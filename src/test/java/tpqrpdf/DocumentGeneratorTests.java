package tpqrpdf;

import com.google.zxing.WriterException;
import com.google.zxing.qrcode.QRCodeWriter;
import me.quentin.tp_qrpdf.models.DocumentGenerator;
import org.junit.jupiter.api.Test;

import java.io.FileInputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class DocumentGeneratorTests {

    /**
     * Verifies that the QR code generated by DocumentGenerator.getQrCodeBytes() is a valid PNG file.
     * @throws Exception
     */
    @Test
    public void testDocumentGeneratorOutputsQrCodeInPngFormat() throws Exception {
        var documentGenerator = newDocumentGenerator();
        var qrCode = documentGenerator.getQrCodeBytes("Test");
        var expectedPngSignature = new byte[]{(byte) 0x89, (byte) 0x50, (byte) 0x4e, (byte) 0x47};

        var qrCodeSignature = Arrays.copyOfRange(qrCode, 0, expectedPngSignature.length);
        assertTrue(Arrays.equals(expectedPngSignature, qrCodeSignature));
    }

    /**
     * Verifies that the output PDF file from DocumentGenerator.generateDocument() is a valid PDF file.
     * @throws Exception
     */
    @Test
    public void testDocumentGeneratorOutputsPdf() throws Exception {
        var documentGenerator = newDocumentGenerator();
        var pdf = documentGenerator.generateDocument("Test");
        var expectedPdfSignature = new byte[]{(byte) 0x25, (byte) 0x50, (byte) 0x44, (byte) 0x46};

        var pdfSignature = new byte[expectedPdfSignature.length];
        var pdfInputStream = new FileInputStream(pdf);
        pdfInputStream.read(pdfSignature);
        pdfInputStream.close();
        assertTrue(Arrays.equals(expectedPdfSignature, pdfSignature));
    }

    private DocumentGenerator newDocumentGenerator() throws WriterException {
        return new DocumentGenerator();
    }
}
